Perfect — let’s rewrite the **Product Requirements Document (PRD)** so it’s explicitly **smart contract–driven** (no traditional backend).
We’ll make sure the **frontend (React + Vite + Framer)** interacts **seamlessly and professionally** with the deployed smart contracts on **Moca Chain**, using **AIR Kit SDK** for decentralized identity.

Below is your **production-ready PRD** you can hand directly to an **AI coder or dev team** 👇

---

# 🧾 Product Requirements Document (PRD)

**Project Title:** **MocaID Vault**
**Built on:** Moca Network
**Category:** Decentralized Identity
**Tags:** #MocaNetwork #AIRKit #MocaChain #VerifiedCredentials #DecentralizedIdentity

---

## 🚀 1. Overview

**MocaID Vault** is a **decentralized identity and credentials manager** built entirely on **Moca Chain** using **smart contracts** and **AIR Kit SDK**.

It empowers users to:

* Create and manage **self-sovereign identities (DIDs)**
* Receive, store, and share **verifiable credentials (VCs)**
* Control data access permissions via **on-chain smart contracts**
* Verify credentials trustlessly with **no centralized backend**

---

## 🎯 2. Objectives

1. Build a fully **on-chain identity system** using **Moca Chain smart contracts**.
2. Integrate **AIR Kit SDK** for decentralized identity creation and verification.
3. Create a **React + Vite frontend** with smooth animations (Framer) and clean icons (Iconify).
4. Ensure **frontend ↔ contract** communication using `ethers.js` or `wagmi`.
5. Maintain high UX standards using **professional UI/UX design principles**.

---

## 🧩 3. System Architecture

### **Architecture Layers**

| Layer                  | Technology                             | Description                                                  |
| ---------------------- | -------------------------------------- | ------------------------------------------------------------ |
| **Blockchain**         | Moca Chain                             | EVM-compatible chain hosting the contracts                   |
| **Smart Contracts**    | Solidity (Hardhat)                     | Identity registry, credential management, and access control |
| **Frontend**           | React + Vite + Framer                  | Interface for users to interact with contracts               |
| **Wallet Integration** | RainbowKit + Wagmi                     | Wallet connect and transaction signing                       |
| **SDK**                | AIR Kit                                | DID creation, credential issuance, and decentralized storage |
| **Icons & Fonts**      | Iconify + Google Fonts (Poppins/Inter) | Visual consistency                                           |

---

## 🔐 4. Smart Contract Architecture

### **1. IdentityRegistry.sol**

Handles decentralized identity registration and updates.

**Functions**

```solidity
function registerIdentity(address user, string memory didURI) public;
function updateIdentity(address user, string memory newDIDURI) public;
function getIdentity(address user) public view returns (string memory);
```

**Events**

* `IdentityRegistered(address indexed user, string didURI);`
* `IdentityUpdated(address indexed user, string newDIDURI);`

---

### **2. CredentialIssuer.sol**

Handles issuance, verification, and revocation of verifiable credentials.

**Functions**

```solidity
function issueCredential(address to, string memory credentialHash) public;
function verifyCredential(string memory credentialHash) public view returns (bool);
function revokeCredential(string memory credentialHash) public;
```

**Events**

* `CredentialIssued(address indexed to, string credentialHash);`
* `CredentialRevoked(string credentialHash);`

---

### **3. AccessControl.sol**

Handles permissioned access to identity or credential data.

**Functions**

```solidity
function grantAccess(address user, string memory resourceId) public;
function revokeAccess(address user, string memory resourceId) public;
function checkAccess(address user, string memory resourceId) public view returns (bool);
```

**Events**

* `AccessGranted(address indexed user, string resourceId);`
* `AccessRevoked(address indexed user, string resourceId);`

---

## 🧠 5. Frontend–Smart Contract Interaction Flow

1. **Connect Wallet:**

   * User connects via **RainbowKit**
   * `ethers.js` or `wagmi` hooks initialize contract instances

2. **Register Identity:**

   * AIR Kit generates a DID and returns the DID URI
   * Frontend sends a transaction to `IdentityRegistry.sol::registerIdentity()`

3. **Issue Credential:**

   * User uploads credential data → AIR Kit hashes it → stored on-chain via `CredentialIssuer.sol`

4. **Verify Credential:**

   * Frontend reads contract state and checks the credential hash validity

5. **Manage Access:**

   * User grants or revokes resource access through `AccessControl.sol`

---

## 🧰 6. Developer Setup

### **Frontend Stack**

* Framework: `React + Vite`
* Animations: `Framer Motion`
* Styling: `TailwindCSS`
* Icons: `Iconify`
* Fonts: `Poppins`, `Inter`
* Wallet: `RainbowKit + Wagmi`
* State management: `Zustand`

### **Smart Contract Stack**

* Language: `Solidity`
* Framework: `Hardhat`
* Testing: `Chai + Mocha`
* Deployment: `Moca Chain Testnet`

### **SDK**

* AIR Kit SDK for DID generation and VC issuance

```bash
npm install @moca/airkit-sdk ethers wagmi @rainbow-me/rainbowkit framer-motion tailwindcss
```

---

## 🔗 7. Documentation Links

| Component               | URL                                                                              |
| ----------------------- | -------------------------------------------------------------------------------- |
| **Moca Network Docs**   | [https://mocaverse.xyz/network](https://mocaverse.xyz/network)                   |
| **Moca Chain Docs**     | [https://docs.mocaverse.xyz/mocachain](https://docs.mocaverse.xyz/mocachain)     |
| **AIR Kit SDK Docs**    | [https://docs.mocaverse.xyz/airkit](https://docs.mocaverse.xyz/airkit)           |
| **Developer Portal**    | [https://developers.mocaverse.xyz](https://developers.mocaverse.xyz)             |
| **Discord (Community)** | [https://discord.com/invite/mocaversenf](https://discord.com/invite/mocaversenf) |

---

## 🎨 8. Frontend UI Screens

| Screen                | Description                             |
| --------------------- | --------------------------------------- |
| **Home / Dashboard**  | Overview of identity & credentials      |
| **My Identity**       | View and edit DID details               |
| **My Credentials**    | Issue, view, and revoke credentials     |
| **Verification Page** | Verify a credential hash                |
| **Access Control**    | Manage who can access data              |
| **Settings**          | Control privacy and display preferences |

All UI screens must use:

* **Framer Motion** for animations (e.g., smooth transitions & hover effects)
* **Tailwind CSS** with consistent spacing and 2xl rounded corners
* **Professional typography hierarchy** using Poppins (titles) and Inter (body)

---

## 🧮 9. Smart Contract → Frontend Integration Example

```tsx
// Example: useRegisterIdentity.tsx

import { useContractWrite, usePrepareContractWrite } from 'wagmi';
import abi from '../abis/IdentityRegistry.json';

export const useRegisterIdentity = (didURI) => {
  const { config } = usePrepareContractWrite({
    address: '0xYourDeployedContractAddress',
    abi,
    functionName: 'registerIdentity',
    args: [didURI],
  });

  return useContractWrite(config);
};
```

---

## 🧱 10. Folder Structure

```
mocaid-vault/
│
├── contracts/
│   ├── IdentityRegistry.sol
│   ├── CredentialIssuer.sol
│   └── AccessControl.sol
│
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── pages/
│   │   ├── styles/
│   │   ├── utils/
│   │   └── main.tsx
│   └── vite.config.ts
│
├── hardhat.config.js
├── package.json
└── README.md
```

---

## ⚖️ 11. Evaluation Alignment (Hackathon Judging)

| Criteria                           | How Addressed                                         |
| ---------------------------------- | ----------------------------------------------------- |
| **Innovation & Novelty (25%)**     | Decentralized identity vault + verified credentials   |
| **Technical Robustness (30%)**     | Three modular smart contracts with secure logic       |
| **User Experience & Design (20%)** | Professional UI built with Framer + clean UX patterns |
| **Privacy & Trustlessness (15%)**  | AIR Kit DIDs + zero centralized control               |
| **Scalability (10%)**              | Modular contracts + decentralized storage             |

---

## 📦 12. Deliverables

1. Smart contracts deployed to **Moca Chain Testnet**
2. Fully functional **React + Vite frontend** integrated with contracts
3. **AIR Kit SDK** for DID + VC handling
4. Full documentation (`README.md`) + Demo walkthrough
5. Hosted frontend link (e.g., Vercel or ICP canister)

---

Would you like me to now generate the **final AI-ready PRD file** (Markdown or PDF) with:

* Contract templates
* Frontend API hooks
* Folder setup scripts

So you can drop it directly into your AI builder (Claude or Cursor)?
